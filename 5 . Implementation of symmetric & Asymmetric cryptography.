from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
# Generate RSA key pair
private_key = rsa.generate_private_key(
  public_exponent=65537,
  key_size=2048
)
public_key = private_key.public_key()
# Serialize and save the keys
private_pem = private_key.private_bytes(
  encoding=serialization.Encoding.PEM,
  format=serialization.PrivateFormat.TraditionalOpenSSL,
  encryption_algorithm=serialization.NoEncryption()
)
public_pem = public_key.public_bytes(
  encoding=serialization.Encoding.PEM,
  format=serialization.PublicFormat.SubjectPublicKeyInfo
)
print("Private Key:")
print(private_pem.decode())
print("\nPublic Key:")
print(public_pem.decode())
# Encryption function
def encrypt_message(message, public_key):
  encrypted = public_key.encrypt(
    message.encode(),
    padding.OAEP(
    mgf=padding.MGF1(algorithm=hashes.SHA256()),
    algorithm=hashes.SHA256(),
    label=None
    )
  )
  return encrypted
# Decryption function
def decrypt_message(encrypted_message, private_key):
  decrypted = private_key.decrypt(
    encrypted_message,
    padding.OAEP(
    mgf=padding.MGF1(algorithm=hashes.SHA256()),
    algorithm=hashes.SHA256(),
    label=None
    )
  )
  return decrypted.decode()
# Example usage
message = "Hello, I am agent John Doe!"
print("\nMessage:", message)
encrypted_msg = encrypt_message(message, public_key)
print("\nEncrypted Message:", encrypted_msg)
print("\nEncrypted Message:", encrypted_msg.hex())
decrypted_msg = decrypt_message(encrypted_msg, private_key)
print("\nDecrypted Message:", decrypted_msg)





-------------------------------OR---------------------------------------------------




import os
from Crypto.Cipher import AES
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import hashes

# Symmetric Encryption (AES)
def symmetric_encryption():
    key = os.urandom(32)
    plaintext = b'This is a secret message'
    
    cipher = AES.new(key, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(plaintext)

    cipher_decrypt = AES.new(key, AES.MODE_EAX, nonce=cipher.nonce)
    decrypted_message = cipher_decrypt.decrypt(ciphertext)

    print("\n[Symmetric AES Encryption]")
    print("Original Message:", plaintext.decode())
    print("Encrypted Message:", ciphertext)
    print("Decrypted Message:", decrypted_message.decode())

# Asymmetric Encryption (RSA)
def asymmetric_encryption():
    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    public_key = private_key.public_key()

    message = b"This is an RSA encrypted message"
    ciphertext = public_key.encrypt(
        message,
        padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()),
                     algorithm=hashes.SHA256(), label=None)
    )

    decrypted_message = private_key.decrypt(
        ciphertext,
        padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()),
                     algorithm=hashes.SHA256(), label=None)
    )

    print("\n[Asymmetric RSA Encryption]")
    print("Original Message:", message.decode())
    print("Encrypted Message:", ciphertext)
    print("Decrypted Message:", decrypted_message.decode())

if __name__ == "__main__":
    symmetric_encryption()
    asymmetric_encryption()
